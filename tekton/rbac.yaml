---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: trigger-service-acct
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: deployment-service-acct
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: ecr-service-acct
secrets:
  - name: containerregcred
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: ecr-secret-acct
---
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: tekton-create-resources
rules:
# Permissions for every EventListener deployment to function
- apiGroups: ["tekton.dev"]
  resources: ["pipelineruns", "eventlisteners", "triggerbindings", "triggertemplates", "tasks", "taskruns"]
  verbs: ["get"]
- apiGroups: [""]
  resources: ["configmaps"]
  verbs: ["get", "list", "watch"]
# Permissions to create resources in associated TriggerTemplates
- apiGroups: ["tekton.dev"]
  resources: ["pipelineruns", "pipelineresources", "taskruns"]
  verbs: ["create", "patch", "delete","list"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: create-triggers
  namespace: tekton-pipelines
subjects:
- kind: ServiceAccount
  name: trigger-service-acct # Name is case sensitive
  namespace: tekton-pipelines
roleRef:
  kind: ClusterRole #this must be Role or ClusterRole
  name: tekton-create-resources # this must match the name of the Role or ClusterRole you wish to bind to
  apiGroup: rbac.authorization.k8s.io
---
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: deploy-resources
rules:
# Permissions for every EventListener deployment to function
- apiGroups: ["*"]
  resources: ["*"]
  verbs: ["*"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: deploy-everything
subjects:
- kind: ServiceAccount
  name: deployment-service-acct # Name is case sensitive
  namespace: tekton-pipelines
roleRef:
  kind: ClusterRole #this must be Role or ClusterRole
  name: deploy-resources # this must match the name of the Role or ClusterRole you wish to bind to
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata: 
  name: ecr-secret-editor
rules:
  - apiGroups: [""]
    resources: ["secrets"]
    verbs: ["delete", "create", "patch"]
  - apiGroups: [""]
    resources: ["serviceaccounts"]
    verbs: ["get", "patch"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: edit-ecr-secret
subjects:
- kind: ServiceAccount
  name: ecr-secret-acct
  namespace: tekton-pipelines
roleRef:
  kind: Role
  name: ecr-secret-editor
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: batch/v1beta1
kind: CronJob
metadata:
  name: refresh-ecr-creds
spec:
  schedule: "* */8 * * *"
  successfulJobsHistoryLimit: 2
  failedJobsHistoryLimit: 2  
  jobTemplate:
    spec:
      backoffLimit: 4
      template:
        spec:
          serviceAccountName: ecr-secret-acct
          terminationGracePeriodSeconds: 0
          restartPolicy: Never
          containers:
          - name: kubectl
            imagePullPolicy: IfNotPresent
            image: frekele/aws-ecr-kubectl:latest
            envFrom:
              - secretRef:
                  name: aws-settings
            command:
            - "/bin/sh"
            - "-c"
            - |
              DOCKER_REGISTRY_SERVER=https://${AWS_ACCOUNT}.dkr.ecr.${AWS_REGION}.amazonaws.com
              DOCKER_USER=AWS
              DOCKER_PASSWORD=`aws ecr get-login --region ${AWS_REGION} --registry-ids ${AWS_ACCOUNT} | cut -d' ' -f6`
              kubectl delete secret containerregcred || true
              kubectl create secret docker-registry containerregcred \
              --docker-server=$DOCKER_REGISTRY_SERVER \
              --docker-username=$DOCKER_USER \
              --docker-password=$DOCKER_PASSWORD \
              --docker-email=none
              kubectl patch serviceaccount ecr-service-acct -p '{"imagePullSecrets":[{"name":"containerregcred"}]}'
---
apiVersion: batch/v1beta1
kind: CronJob
metadata:
  name: tidy-old-pipeline-runs
spec:
  schedule: "0 4 * * *"
  successfulJobsHistoryLimit: 2
  failedJobsHistoryLimit: 2  
  jobTemplate:
    spec:
      backoffLimit: 4
      template:
        spec:
          serviceAccountName: trigger-service-acct
          terminationGracePeriodSeconds: 0
          restartPolicy: Never
          containers:
          - name: kubectl
            imagePullPolicy: IfNotPresent
            image: bitnami/kubectl:1.15
            command:
            - "/bin/sh"
            - "-c"
            - |
              kubectl get pipelineruns -o go-template --template '{{range .items}}{{.metadata.name}} {{.metadata.creationTimestamp}}{{"\n"}}{{end}}' | awk -v date="$(date -d "@$(($(date +%s) - 259200))" +%Y-%m-%d)" '$2 < date {print $1}' | xargs --no-run-if-empty kubectl delete pipelinerun
  