---
apiVersion: tekton.dev/v1alpha1
kind: Task
metadata:
  name: build-docker-image-from-git-source
spec:
  inputs:
    resources:
      - name: source-repo
        type: git
    params:
      - name: pathToDockerFile
        type: string
        description: The path to the dockerfile to build
        default: /workspace/source-repo/Dockerfile
      - name: pathToContext
        type: string
        description:
          The build context used by Kaniko
          (https://github.com/GoogleContainerTools/kaniko#kaniko-build-contexts)
        default: /workspace/source-repo
  outputs:
    resources:
      - name: builtImage
        type: image
  steps:
    - name: build-and-push
      image: gcr.io/kaniko-project/executor:debug
      # specifying DOCKER_CONFIG is required to allow kaniko to detect docker credential
      env:
        - name: "DOCKER_CONFIG"
          value: "/tekton/home/.docker/"
      command:
        - /kaniko/executor
      args:
        - --dockerfile=$(inputs.params.pathToDockerFile)
        - --destination=$(outputs.resources.builtImage.url)
        - --context=$(inputs.params.pathToContext)
---
apiVersion: tekton.dev/v1alpha1
kind: Task
metadata:
  name: spawn-service-builds
spec:
  inputs:
    resources:
      - name: source
        targetPath: .
        type: git
      - name: image
        type: image
  steps:
    - name: create-service-pipeline-runs
      image: csstaylor/builder-image:0.2
      command: ["./build-helper.sh"]
      args:
        - "$(inputs.resources.image.url)"
---
apiVersion: tekton.dev/v1alpha1
kind: Task
metadata:
  name: notify-slack
spec:
  inputs:
    params:
      - name: message
        type: string
  steps:
    - name: send-notification
      image: technosophos/slack-notify
      env:
        - name: SLACK_WEBHOOK
          valueFrom: 
            secretKeyRef:
              name: slackwebhookurl
              key: url
        - name: SLACK_MESSAGE
          value: $(inputs.params.message)
---
apiVersion: tekton.dev/v1alpha1
kind: Task
metadata:
  name: create-environment
spec:
  inputs:
    params:
      - name: namespace
        type: string
      - name: giturl
        type: string
      - name: pathToManifests
        type: string
  steps:
    - name: create-namespace
      image: bitnami/kubectl:latest
      args: 
        - "create"
        - "namespace"
        - "$(inputs.params.namespace)"
    - name: copy-in-git-secret
      image: bitnami/kubectl:latest
      command: ["/bin/sh"]
      args: 
        - "-c"
        - "\"kubectl get secret/flux-git-auth --namespace=tekton-pipelines -oyaml | grep -v '^\\s*namespace:\\s' | kubectl apply --namespace=$(inputs.params.namespace) -f -\""
    - name: add-flux
      image: alpine/helm:3.0.1
      args: 
        - repo
        - add
        - fluxcd
        - https://charts.fluxcd.io
    - name: deploy-flux
      image: alpine/helm:3.0.1
      args:
        - upgrade
        - "--install"
        - flux-$(inputs.params.namespace)
        - "--namespace"
        - $(inputs.params.namespace)
        - --set 
        - git.url=$(inputs.params.giturl)
        - --set 
        - git.path=$(inputs.params.pathToManifests)
        - --set
        - clusterRole.create=false
        - --set
        - git.pollInterval=60s
        - --set
        - git.branch=flux
        - --set
        - env.secretName=flux-git-auth
        - fluxcd/flux
---
apiVersion: tekton.dev/v1alpha1
kind: Task
metadata:
  name: delete-namespace
spec:
  inputs:
    params:
      - name: namespace
        type: string
  steps:
    - name: delete-namespace
      image: bitnami/kubectl:latest
      args: 
        - "delete"
        - "namespace"
        - "$(inputs.params.namespace)"
    - name: delete-flux-crd
      image: bitnami/kubectl:latest
      args:
        - "delete"
        - clusterrole
        - flux-$(inputs.params.namespace)-crd
    - name: delete-flux-crb
      image: bitnami/kubectl:latest
      args:
        - "delete"
        - clusterrolebinding
        - flux-$(inputs.params.namespace)
